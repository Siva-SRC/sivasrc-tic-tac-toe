[{"/home/admin-pc/Desktop/ReactJsDemo/tic-tac-toe-game/src/index.js":"1","/home/admin-pc/Desktop/ReactJsDemo/tic-tac-toe-game/src/reportWebVitals.js":"2","/home/admin-pc/Desktop/ReactJsDemo/tic-tac-toe-game/src/App.js":"3","/home/admin-pc/Desktop/ReactJsDemo/tic-tac-toe-game/src/components/board/Board.jsx":"4"},{"size":500,"mtime":1612374827477,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1612374827477,"results":"7","hashOfConfig":"6"},{"size":226,"mtime":1612467922696,"results":"8","hashOfConfig":"6"},{"size":6285,"mtime":1612471817089,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"z3pc4f",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/home/admin-pc/Desktop/ReactJsDemo/tic-tac-toe-game/src/index.js",[],["20","21"],"/home/admin-pc/Desktop/ReactJsDemo/tic-tac-toe-game/src/reportWebVitals.js",[],"/home/admin-pc/Desktop/ReactJsDemo/tic-tac-toe-game/src/App.js",[],"/home/admin-pc/Desktop/ReactJsDemo/tic-tac-toe-game/src/components/board/Board.jsx",["22","23"],"import { Modal } from \"react-bootstrap\";\nimport React, { Component } from \"react\";\nimport \"./Board.css\";\n\nexport class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playerTurn: \"X\",\n      boardArray: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      result: \"\",\n      isFinished: false,\n      stepCounter: 1,\n      isOpen: true,\n    };\n  }\n\n  handleClick = (index) => {\n    if (\n      this.state.result === \"\" &&\n      this.state.stepCounter <= 9 &&\n      this.state.boardArray[index] === \"\"\n    ) {\n      console.log(\"inside if\");\n      this.setState({\n        stepCounter: this.state.stepCounter + 1,\n      });\n      let PLAYER_TURN = this.state.playerTurn;\n      let BOARD_ARRAY = this.state.boardArray;\n      console.log(PLAYER_TURN);\n      console.log(BOARD_ARRAY[index]);\n      console.log(index);\n      BOARD_ARRAY[index] = PLAYER_TURN;\n      let winningCombos = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n      ];\n\n      for (let i = 0; i < winningCombos.length; i++) {\n        let winningRow = winningCombos[i];\n        //   console.log(\"winning row \", winningRow);\n\n        let p1 = winningRow[0];\n        let p2 = winningRow[1];\n        let p3 = winningRow[2];\n        //   console.log(\"p1\", p1);\n\n        //   console.log(\"BOARD_ARRAY[p1] \", BOARD_ARRAY[p1]);\n        //   console.log(\"BOARD_ARRAY[p2] \", BOARD_ARRAY[p2]);\n        //   console.log(\"BOARD_ARRAY[p3] \", BOARD_ARRAY[p3]);\n\n        if (\n          BOARD_ARRAY[p1] !== \"\" &&\n          BOARD_ARRAY[p2] !== \"\" &&\n          BOARD_ARRAY[p3] !== \"\" &&\n          BOARD_ARRAY[p1] === BOARD_ARRAY[p2] &&\n          BOARD_ARRAY[p2] === BOARD_ARRAY[p3] &&\n          BOARD_ARRAY[p3] === BOARD_ARRAY[p1]\n        ) {\n          // if (PLAYER_TURN === \"X\") {\n          //   this.setState({\n          //     result: \"Player 1 Wins !!!\",\n          //     isFinished: true,\n          //   });\n          // }\n          // if (PLAYER_TURN === \"O\") {\n          //   this.setState({\n          //     result: \"Player 2 Wins !!!\",\n          //     isFinished: false,\n          //   });\n          // }\n          // console.log(`Winner is ${PLAYER_TURN}`);\n          this.setState({\n            result: `Winner is ${PLAYER_TURN}`,\n            isFinished: true,\n          });\n          break;\n        }\n      }\n      // console.warn(BOARD_ARRAY);\n\n      PLAYER_TURN = PLAYER_TURN === \"X\" ? \"O\" : \"X\";\n\n      this.setState({\n        playerTurn: PLAYER_TURN,\n        boardArray: BOARD_ARRAY,\n      });\n    }\n    if (this.state.stepCounter == 9 && this.state.result == \"\") {\n      this.setState({\n        isFinished: true,\n        result: \"Oops , Out of moves !!!\",\n      });\n    }\n  };\n\n  handleCloseModal = () => {\n    this.setState({\n      isFinished: false,\n    });\n    window.location.reload();\n  };\n\n  render() {\n    return (\n      <div className=\"board\">\n        <p className=\"heading\">Tic Tac Toe</p>\n        {this.state.boardArray.map((data, index) => {\n          return (\n            <button\n              key={index}\n              onClick={() => this.handleClick(index)}\n              className=\"btn btn-danger\"\n              style={{\n                // border: \"1px solid lightgray\",\n                // border: \"1px solid black\",\n                border: \"white 1px solid\",\n                width: \"33.3%\",\n                height: \"10vh\",\n                fontSize: \"50px\",\n              }}\n            >\n              {data}\n            </button>\n          );\n        })}\n        <Modal\n          style={{\n            marginTop: \"23vh\",\n          }}\n          show={this.state.isFinished}\n        >\n          <Modal.Header style={{ justifyContent: \"center\" }}>\n            <p style={{ fontFamily: \"Anton, sans-serif\", fontSize: \"50px\" }}>\n              Result\n            </p>\n          </Modal.Header>\n          <Modal.Body\n            style={\n              this.state.result === \"Oops , Out of moves !!!\"\n                ? {\n                    textAlign: \"center\",\n                    fontSize: \"30px\",\n                  }\n                : {\n                    textAlign: \"center\",\n                    fontSize: \"30px\",\n                    backgroundImage: `url(\"https://media1.giphy.com/media/USOWFXIk9fyTllM0aV/source.gif\")`,\n                    backgroundSize: \"contain\",\n                  }\n            }\n          >\n            <br />\n            <br />\n            <p style={{ fontFamily: \"Anton, sans-serif\" }}>\n              {this.state.result}\n            </p>\n            <br />\n            <br />\n          </Modal.Body>\n          <Modal.Footer>\n            <button onClick={this.handleCloseModal} className=\"btn btn-primary\">\n              Restart\n            </button>\n          </Modal.Footer>\n        </Modal>\n        <Modal\n          style={{\n            marginTop: \"23vh\",\n          }}\n          show={this.state.isOpen}\n        >\n          <Modal.Header\n            style={{\n              justifyContent: \"center\",\n            }}\n          >\n            <p\n              style={{\n                fontFamily: \"Anton, sans-serif\",\n                fontSize: \"50px\",\n              }}\n            >\n              Tic Tac Toe\n            </p>\n          </Modal.Header>\n          <Modal.Body\n            style={{\n              textAlign: \"center\",\n              fontSize: \"20px\",\n            }}\n          >\n            <br />\n            <p\n              style={{\n                padding: \"10px\",\n              }}\n            >\n              <strong>Player 1 : X</strong>\n            </p>\n            <p\n              style={{\n                padding: \"10px\",\n              }}\n            >\n              <strong>Player 2 : O</strong>\n            </p>\n            <br />\n          </Modal.Body>\n          <Modal.Footer>\n            <button\n              onClick={() =>\n                this.setState({\n                  isOpen: false,\n                })\n              }\n              className=\"btn btn-success\"\n              style={{\n                width: \"40%\",\n                margin: \"auto\",\n              }}\n            >\n              Start Game\n            </button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":95,"column":32,"nodeType":"30","messageId":"31","endLine":95,"endColumn":34},{"ruleId":"28","severity":1,"message":"29","line":95,"column":58,"nodeType":"30","messageId":"31","endLine":95,"endColumn":60},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]